code = [3,225,1,225,6,6,1100,1,238,225,104,0,1002,188,27,224,1001,224,-2241,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,101,65,153,224,101,-108,224,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1,158,191,224,101,-113,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,195,14,224,1001,224,-81,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1102,47,76,225,1102,35,69,224,101,-2415,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,32,38,224,101,-70,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,66,13,225,1102,43,84,225,1101,12,62,225,1102,30,35,225,2,149,101,224,101,-3102,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,76,83,225,1102,51,51,225,1102,67,75,225,102,42,162,224,101,-1470,224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1108,226,677,224,1002,223,2,223,1005,224,329,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,344,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,374,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,389,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,404,1001,223,1,223,7,226,226,224,1002,223,2,223,1005,224,419,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,449,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,464,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1107,677,677,224,1002,223,2,223,1005,224,494,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,509,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,524,1001,223,1,223,1008,677,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1108,226,226,224,102,2,223,223,1005,224,554,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,569,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,584,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,599,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,644,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,659,1001,223,1,223,1008,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226]

code2 = [1002, 1, 0, 1, 99]


input = 1

def parameter(opcode, code, i):
    instruction = opcode[:-2]

    # If necessary, add 0's to omitted 0's in opcode
    # i.e 102 -> 00102
    if len(instruction) < 3:
        for j in range(3 - len(instruction)):
            instruction = '0' + instruction

    #print(instruction)

    # Reading the parameter modes from right to left
    # Determines if parameter 1 is postion/immediate mode
    if instruction[-1] == '0':
        value1 = code[code[i+1]]
        print('P1: Position -> {}'.format(value1))
    elif instruction[-1] == '1':
        value1 = code[i+1]
        print('P1: Immediate -> {}'.format(value1))

    # Determnines mode of parameter 2
    if instruction[-2] == '0':
        value2 = code[code[i+2]]
        print('P2: Position -> {}'.format(value2))
    elif instruction[-2] == '1':
        value2 = code[i+2]
        print('P2: Immediate -> {}'.format(value2))

    # Parameter 3 should always be 0... will never write in immediate

    return value1, value2
    
def intcode(code):
    i = 0
    input = 1

    while i < (len(code) - 1):
        print('{} | {}, {}, {}, {}'.format(i, code[i], code[i+1], code[i+2], code[i+3]))
    
        operation = str(code[i])

        if operation[-2:] in ['01', '1']:  # Include both 01 and 1 to encompass both 1001 and 1 as opcodes
            temp = code[code[i+3]]
            m, n = parameter(operation, code, i)
            added_value = m + n
            #added_value = parameter(operation, code, i)[0] + parameter(operation, code, i)[1]
            code[code[i+3]] = added_value
            print('Index: {}, {} -> {}'.format(code[i+3], temp, code[code[i+3]]))
            i += 4

        elif operation[-2:] in ['02', '2']:  # Same as above
            temp = code[code[i+3]]
            m, n = parameter(operation, code, i)
            mult_value = m * n
            #mult_value = parameter(operation, code, i)[0] * parameter(operation, code, i)[1]
            code[code[i+3]] = mult_value
            print('Index: {}, {} -> {}'.format(code[i+3], temp, code[code[i+3]]))
            i += 4

        elif operation == '3':
            temp = code[code[i+1]]
            code[code[i+1]] = input
            print('Index: {}, {} -> {}'.format(i, temp, code[code[i+1]]))
            i += 2

        elif operation == '4':
            print('Output: {}'.format(code[code[i+1]]))
            i += 2
        
        elif operation == '99':
            print('Diagnostic Number: {}'.format(code[i+1]))
            break
        
        else:
            i += 1

        print('')

intcode(code)
    
        
            
